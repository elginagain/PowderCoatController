<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="42e9cee9-cf8e-4a37-984c-80c486563aed" name="Changes" comment="Summary&#10;&#10;    pid_autotune.py now contains a relay-feedback auto-tuning algorithm that overrides the heater output for a fixed test duration, measures oscillations, and computes PID gains using Ziegler–Nichols rules.&#10;    app.py has been updated to include a /pid_autotune route that supports both GET (to show the tuning interface) and POST (to run auto-tuning). When auto-tuning is run, the tuned PID parameters are stored in the global dictionary pid_params and also saved in the configuration.&#10;    pid_autotune.html is the template for the PID auto-tune page.">
      <change beforePath="$PROJECT_DIR$/templates/pid_autotune.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/pid_autotune.html" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;elginagain&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/elginagain/PowderCoatController&quot;,
    &quot;accountId&quot;: &quot;4c7c4038-d7e2-424e-8140-a73f505480cb&quot;
  }
}</component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 4
}</component>
  <component name="ProjectId" id="2tmIk9Sbn5165ZFCqdmXvWtoW42" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Python.app.executor&quot;: &quot;Run&quot;,
    &quot;Python.temperature_sensor.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/Elgin/PycharmProjects/PCoven/templates&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\Elgin\PycharmProjects\PCoven\templates" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="app" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
      <module name="PcOven" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
        <env name="FLASK_APP" value="app.py=" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="SDK_NAME" value="Python 3.11 (PCoven)" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="IS_MODULE_SDK" value="false" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/app.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-14705d77f0bb-aa17d162503b-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-243.25659.43" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="42e9cee9-cf8e-4a37-984c-80c486563aed" name="Changes" comment="" />
      <created>1740950963541</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1740950963541</updated>
    </task>
    <task id="LOCAL-00020" summary="added a test script to test the PWM output and figure out why the LED on pin 17 isn't lighting up to indicate the SSR is being triggered when the oven is on and below set point.">
      <option name="closed" value="true" />
      <created>1741407492721</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1741407492721</updated>
    </task>
    <task id="LOCAL-00021" summary="Inverted duty cycle on app.py to see if that fixes the pid output on pin 17 so it lights the test led on the hat.">
      <option name="closed" value="true" />
      <created>1741408286865</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1741408286865</updated>
    </task>
    <task id="LOCAL-00022" summary="Key Points&#10;&#10;    The PID loop now prints debugging messages and calls pwm.ChangeDutyCycle(duty_cycle) without inversion, because your LED is active‑high.&#10;    The /power endpoint starts the PID loop if the oven is turned on.&#10;    The application should be run with sudo python3 app.py to ensure GPIO access.&#10;    The rest of the code (cycle management, temperature logging, timer, routes) remains as before.">
      <option name="closed" value="true" />
      <created>1741409035336</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1741409035336</updated>
    </task>
    <task id="LOCAL-00023" summary="added GPIO.cleanup()  # Clean up any previous allocations">
      <option name="closed" value="true" />
      <created>1741409558787</created>
      <option name="number" value="00023" />
      <option name="presentableId" value="LOCAL-00023" />
      <option name="project" value="LOCAL" />
      <updated>1741409558787</updated>
    </task>
    <task id="LOCAL-00024" summary="elow is an updated version of the GPIO setup section for your app.py. This version does a few things to help resolve the &quot;GPIO not allocated&quot; error:&#10;&#10;    Disables warnings: Some issues occur because of leftover warnings or previous allocations.&#10;    Registers a cleanup handler via atexit: This ensures that GPIO.cleanup() is always called on exit.&#10;    Attempts a cleanup before re‑initializing: This can help free any resources left over from previous runs.&#10;    Uses GPIO.setmode(GPIO.BCM) explicitly: To ensure the board is set to BCM mode.">
      <option name="closed" value="true" />
      <created>1741409986718</created>
      <option name="number" value="00024" />
      <option name="presentableId" value="LOCAL-00024" />
      <option name="project" value="LOCAL" />
      <updated>1741409986718</updated>
    </task>
    <task id="LOCAL-00025" summary="Added import os&#10;os.environ[&quot;GPIO_USE_DEV_MEM&quot;] = &quot;1&quot;  # Force RPi.GPIO to use /dev/mem&#10;&#10;Since you’re running Debian Bookworm instead of Raspberry Pi OS, the /dev/gpiomem device isn’t being created by your kernel. RPi.GPIO normally uses /dev/gpiomem on Raspberry Pi OS, but on other distributions, you’ll need to force it to use /dev/mem instead. (Be aware that using /dev/mem is less secure, so you should only run this code in a controlled environment.)&#10;&#10;One common workaround is to set the environment variable GPIO_USE_DEV_MEM to &quot;1&quot; before RPi.GPIO is imported. This tells RPi.GPIO to use /dev/mem.">
      <option name="closed" value="true" />
      <created>1741411522071</created>
      <option name="number" value="00025" />
      <option name="presentableId" value="LOCAL-00025" />
      <option name="project" value="LOCAL" />
      <updated>1741411522071</updated>
    </task>
    <task id="LOCAL-00026" summary="Below is an updated full version of your app.py with one key change: the immediate call to GPIO.cleanup() at startup has been removed. (We’re still registering cleanup via atexit.) In some cases, calling GPIO.cleanup() right away can interfere with RPi.GPIO’s ability to determine the SOC peripheral base address.">
      <option name="closed" value="true" />
      <created>1741458528469</created>
      <option name="number" value="00026" />
      <option name="presentableId" value="LOCAL-00026" />
      <option name="project" value="LOCAL" />
      <updated>1741458528469</updated>
    </task>
    <task id="LOCAL-00027" summary="Below is a complete updated version of your app.py that replaces RPi.GPIO with the pigpio library for GPIO/PWM control. This approach works more reliably on Debian‑based systems (like Raspberry Pi OS Lite 32‑bit on your hardware) and avoids the “GPIO not allocated” error. Note that you must have pigpiod (the pigpio daemon) running for this code to work. You can start it with:">
      <option name="closed" value="true" />
      <created>1741458856167</created>
      <option name="number" value="00027" />
      <option name="presentableId" value="LOCAL-00027" />
      <option name="project" value="LOCAL" />
      <updated>1741458856167</updated>
    </task>
    <task id="LOCAL-00028" summary="Key Points&#10;&#10;    This version uses pigpio in soft mode by calling:&#10;&#10;pi = pigpio.pi('soft')&#10;&#10;This bypasses hardware detection and avoids the &quot;GPIO not allocated&quot; error.&#10;The PID loop computes a duty cycle (0–100) and converts it to pigpio’s scale (0–255).&#10;A new test endpoint /test_pwm lets you force a 100% PWM output for 10 seconds to check the LED.&#10;Make sure to run pigpio in soft mode; you do not need to start pigpiod when using soft mode.">
      <option name="closed" value="true" />
      <created>1741459839066</created>
      <option name="number" value="00028" />
      <option name="presentableId" value="LOCAL-00028" />
      <option name="project" value="LOCAL" />
      <updated>1741459839066</updated>
    </task>
    <task id="LOCAL-00029" summary="Below is the complete updated app.py that uses pigpio in its normal mode (without “soft”) so that it connects to the pigpiod daemon running on localhost.">
      <option name="closed" value="true" />
      <created>1741460036662</created>
      <option name="number" value="00029" />
      <option name="presentableId" value="LOCAL-00029" />
      <option name="project" value="LOCAL" />
      <updated>1741460036662</updated>
    </task>
    <task id="LOCAL-00030" summary="Below is the complete updated app.py that uses pigpio in its normal mode (without “soft”) so that it connects to the pigpiod daemon running on localhost.">
      <option name="closed" value="true" />
      <created>1741460216043</created>
      <option name="number" value="00030" />
      <option name="presentableId" value="LOCAL-00030" />
      <option name="project" value="LOCAL" />
      <updated>1741460216043</updated>
    </task>
    <task id="LOCAL-00031" summary="Below is the complete updated app.py that uses pigpio in its normal mode (without “soft”) so that it connects to the pigpiod daemon running on localhost.">
      <option name="closed" value="true" />
      <created>1741460612092</created>
      <option name="number" value="00031" />
      <option name="presentableId" value="LOCAL-00031" />
      <option name="project" value="LOCAL" />
      <updated>1741460612092</updated>
    </task>
    <task id="LOCAL-00032" summary="created run_app.py">
      <option name="closed" value="true" />
      <created>1741462186646</created>
      <option name="number" value="00032" />
      <option name="presentableId" value="LOCAL-00032" />
      <option name="project" value="LOCAL" />
      <updated>1741462186646</updated>
    </task>
    <task id="LOCAL-00033" summary="created run_app.sh">
      <option name="closed" value="true" />
      <created>1741462254277</created>
      <option name="number" value="00033" />
      <option name="presentableId" value="LOCAL-00033" />
      <option name="project" value="LOCAL" />
      <updated>1741462254277</updated>
    </task>
    <task id="LOCAL-00034" summary="pi = pigpio.pi(&quot;soft&quot;, 8888)">
      <option name="closed" value="true" />
      <created>1741462509812</created>
      <option name="number" value="00034" />
      <option name="presentableId" value="LOCAL-00034" />
      <option name="project" value="LOCAL" />
      <updated>1741462509812</updated>
    </task>
    <task id="LOCAL-00035" summary="Below is a complete updated version of your app.py that reverts to using RPi.GPIO (which you’ve confirmed works in your test script) instead of pigpio. This version uses hardware PWM via RPi.GPIO on GPIO 17. (Make sure you run it with sudo, and that your virtual environment is active.)">
      <option name="closed" value="true" />
      <created>1741462842854</created>
      <option name="number" value="00035" />
      <option name="presentableId" value="LOCAL-00035" />
      <option name="project" value="LOCAL" />
      <updated>1741462842854</updated>
    </task>
    <task id="LOCAL-00036" summary="#os.environ[&quot;GPIO_USE_DEV_MEM&quot;] = &quot;1&quot;  # Force RPi.GPIO to use /dev/mem">
      <option name="closed" value="true" />
      <created>1741463176111</created>
      <option name="number" value="00036" />
      <option name="presentableId" value="LOCAL-00036" />
      <option name="project" value="LOCAL" />
      <updated>1741463176111</updated>
    </task>
    <task id="LOCAL-00037" summary="Below is an updated version of your app.py that moves the RPi.GPIO initialization into a function called init_gpio(), which is then called in the if __name__ == '__main__': block. This should help ensure that your GPIO resources are allocated fresh for your application.">
      <option name="closed" value="true" />
      <created>1741463756125</created>
      <option name="number" value="00037" />
      <option name="presentableId" value="LOCAL-00037" />
      <option name="project" value="LOCAL" />
      <updated>1741463756125</updated>
    </task>
    <task id="LOCAL-00038" summary="if __name__ == '__main__':&#10;    init_gpio()  # Initialize GPIO now (after all imports)&#10;    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)&#10;&#10;disabled reloader.">
      <option name="closed" value="true" />
      <created>1741463939641</created>
      <option name="number" value="00038" />
      <option name="presentableId" value="LOCAL-00038" />
      <option name="project" value="LOCAL" />
      <updated>1741463939641</updated>
    </task>
    <task id="LOCAL-00039" summary="Adjusting pid control loop to make it shut off pin 17 faster when the temp exceeds the set point.">
      <option name="closed" value="true" />
      <created>1741464696397</created>
      <option name="number" value="00039" />
      <option name="presentableId" value="LOCAL-00039" />
      <option name="project" value="LOCAL" />
      <updated>1741464696397</updated>
    </task>
    <task id="LOCAL-00040" summary="init gpio error fixed.">
      <option name="closed" value="true" />
      <created>1741464848432</created>
      <option name="number" value="00040" />
      <option name="presentableId" value="LOCAL-00040" />
      <option name="project" value="LOCAL" />
      <updated>1741464848432</updated>
    </task>
    <task id="LOCAL-00041" summary="Updated dashboard to make everything fit without scrolling.">
      <option name="closed" value="true" />
      <created>1741486336255</created>
      <option name="number" value="00041" />
      <option name="presentableId" value="LOCAL-00041" />
      <option name="project" value="LOCAL" />
      <updated>1741486336255</updated>
    </task>
    <task id="LOCAL-00042" summary="I let chatgpt redesign the layout on dashboard.html Let's see what it came up with.">
      <option name="closed" value="true" />
      <created>1741488222366</created>
      <option name="number" value="00042" />
      <option name="presentableId" value="LOCAL-00042" />
      <option name="project" value="LOCAL" />
      <updated>1741488222366</updated>
    </task>
    <task id="LOCAL-00043" summary="slight update, the light button has been moved.">
      <option name="closed" value="true" />
      <created>1741488505964</created>
      <option name="number" value="00043" />
      <option name="presentableId" value="LOCAL-00043" />
      <option name="project" value="LOCAL" />
      <updated>1741488505964</updated>
    </task>
    <task id="LOCAL-00044" summary="More dashboard.html updates to get the layout correct.">
      <option name="closed" value="true" />
      <created>1741488707009</created>
      <option name="number" value="00044" />
      <option name="presentableId" value="LOCAL-00044" />
      <option name="project" value="LOCAL" />
      <updated>1741488707009</updated>
    </task>
    <task id="LOCAL-00045" summary="More dashboard.html updates to get the layout correct.">
      <option name="closed" value="true" />
      <created>1741489000622</created>
      <option name="number" value="00045" />
      <option name="presentableId" value="LOCAL-00045" />
      <option name="project" value="LOCAL" />
      <updated>1741489000622</updated>
    </task>
    <task id="LOCAL-00046" summary="fixed functionality that chatgpt broke in previous update.">
      <option name="closed" value="true" />
      <created>1741489346460</created>
      <option name="number" value="00046" />
      <option name="presentableId" value="LOCAL-00046" />
      <option name="project" value="LOCAL" />
      <updated>1741489346460</updated>
    </task>
    <task id="LOCAL-00047" summary="Updated dashboard layout">
      <option name="closed" value="true" />
      <created>1741537778959</created>
      <option name="number" value="00047" />
      <option name="presentableId" value="LOCAL-00047" />
      <option name="project" value="LOCAL" />
      <updated>1741537778959</updated>
    </task>
    <task id="LOCAL-00048" summary="Updated dashboard layout">
      <option name="closed" value="true" />
      <created>1741538365870</created>
      <option name="number" value="00048" />
      <option name="presentableId" value="LOCAL-00048" />
      <option name="project" value="LOCAL" />
      <updated>1741538365870</updated>
    </task>
    <task id="LOCAL-00049" summary="Updated graphs to show time at bottom. app.py revised to support this feature.">
      <option name="closed" value="true" />
      <created>1741540041984</created>
      <option name="number" value="00049" />
      <option name="presentableId" value="LOCAL-00049" />
      <option name="project" value="LOCAL" />
      <updated>1741540041984</updated>
    </task>
    <task id="LOCAL-00050" summary="fixed typo in dashboard">
      <option name="closed" value="true" />
      <created>1741540152414</created>
      <option name="number" value="00050" />
      <option name="presentableId" value="LOCAL-00050" />
      <option name="project" value="LOCAL" />
      <updated>1741540152414</updated>
    </task>
    <task id="LOCAL-00051" summary="Temp graph was messed up during the switch to showing time at the bottom. The link to historical cycles has been added to the dashboard now.">
      <option name="closed" value="true" />
      <created>1741541260865</created>
      <option name="number" value="00051" />
      <option name="presentableId" value="LOCAL-00051" />
      <option name="project" value="LOCAL" />
      <updated>1741541260865</updated>
    </task>
    <task id="LOCAL-00052" summary="Temp graph was messed up during the switch to showing time at the bottom. The link to historical cycles has been added to the dashboard now.">
      <option name="closed" value="true" />
      <created>1741542081380</created>
      <option name="number" value="00052" />
      <option name="presentableId" value="LOCAL-00052" />
      <option name="project" value="LOCAL" />
      <updated>1741542081380</updated>
    </task>
    <task id="LOCAL-00053" summary="Temp graph was messed up during the switch to showing time at the bottom. The link to historical cycles has been added to the dashboard now.">
      <option name="closed" value="true" />
      <created>1741542638959</created>
      <option name="number" value="00053" />
      <option name="presentableId" value="LOCAL-00053" />
      <option name="project" value="LOCAL" />
      <updated>1741542638959</updated>
    </task>
    <task id="LOCAL-00054" summary="Temp graph was messed up during the switch to showing time at the bottom. The link to historical cycles has been added to the dashboard now.">
      <option name="closed" value="true" />
      <created>1741543573447</created>
      <option name="number" value="00054" />
      <option name="presentableId" value="LOCAL-00054" />
      <option name="project" value="LOCAL" />
      <updated>1741543573447</updated>
    </task>
    <task id="LOCAL-00055" summary="With these older versions of Chart.js (2.9.4) and chartjs-plugin-zoom (0.7.7), your Pi’s Chromium browser should no longer complain about import conditions. The julianday() usage in app.py ensures timestamps are recognized. Let me know if this finally resolves the blank graph issue!">
      <option name="closed" value="true" />
      <created>1742055265129</created>
      <option name="number" value="00055" />
      <option name="presentableId" value="LOCAL-00055" />
      <option name="project" value="LOCAL" />
      <updated>1742055265129</updated>
    </task>
    <task id="LOCAL-00056" summary="Using Chart.js 2.9.4 + Moment.js 2.24.0 + chartjs-plugin-zoom 0.7.7 should resolve the “import conditions not satisfied” error on older Pi browsers. Let me know if this finally displays the graphs correctly!">
      <option name="closed" value="true" />
      <created>1742055882388</created>
      <option name="number" value="00056" />
      <option name="presentableId" value="LOCAL-00056" />
      <option name="project" value="LOCAL" />
      <updated>1742055882388</updated>
    </task>
    <task id="LOCAL-00057" summary="xplanation of Key Changes in app.py&#10;&#10;    Temperature Logger: Now prints a debug message every 5 seconds, so you can see if it’s inserting data or not.&#10;    /current_temp_history: Temporarily removed the 2‑hour filter. We simply show all readings in the current cycle. If no readings are found, we return dummy data.&#10;    /test_readings: New route that returns the last 10 rows from the readings table. This helps confirm whether new rows are actually being inserted.&#10;    Logger Sleep: Changed from 1 second to 5 seconds so it doesn’t spam the database too quickly while debugging.">
      <option name="closed" value="true" />
      <created>1742057635956</created>
      <option name="number" value="00057" />
      <option name="presentableId" value="LOCAL-00057" />
      <option name="project" value="LOCAL" />
      <updated>1742057635956</updated>
    </task>
    <task id="LOCAL-00058" summary="Key Changes:&#10;&#10;    We have an interval that calls fetchAndUpdate() every 10 seconds, so the chart automatically refreshes.&#10;    We initialize the chart once (with empty data) in initChart(), then in fetchAndUpdate() we fetch data from /current_temp_history and call updateChartData(data) to update the existing chart without re-creating it.&#10;    This ensures you see new points every 10 seconds.">
      <option name="closed" value="true" />
      <created>1742059184319</created>
      <option name="number" value="00058" />
      <option name="presentableId" value="LOCAL-00058" />
      <option name="project" value="LOCAL" />
      <updated>1742059184319</updated>
    </task>
    <task id="LOCAL-00059" summary=" The only changes relate to how the timestamp (ts) is computed in the SQL queries—now using SQLite’s 'localtime' modifier so that the epoch is computed from the stored timestamp as local time. This should cause Chart.js to display times that match your Pi’s local clock.">
      <option name="closed" value="true" />
      <created>1742060308084</created>
      <option name="number" value="00059" />
      <option name="presentableId" value="LOCAL-00059" />
      <option name="project" value="LOCAL" />
      <updated>1742060308084</updated>
    </task>
    <task id="LOCAL-00060" summary="Summary&#10;&#10;    We removed the ,'localtime' from your SQL queries.&#10;    You’re still storing local timestamps in the DB via datetime.now().&#10;    Chart.js is reading the numeric timestamps (epoch) and displaying them in the browser’s local time.&#10;&#10;If your Pi’s clock/time zone is correct (timedatectl), the lines on the graph should now reflect local time without being offset by ~10 hours. If you still see the wrong time, ensure you’ve replaced all instances of ,'localtime' and restarted Flask. Also confirm your Pi’s time zone matches the actual local time.">
      <option name="closed" value="true" />
      <created>1742061567629</created>
      <option name="number" value="00060" />
      <option name="presentableId" value="LOCAL-00060" />
      <option name="project" value="LOCAL" />
      <updated>1742061567629</updated>
    </task>
    <task id="LOCAL-00061" summary="Summary of Changes&#10;&#10;    In both /current_temp_history and /cycles/&lt;int:cycle_id&gt;/data routes, we now use the SQLite modifier 'utc' in the julianday function so that timestamps stored via datetime.now() (local time) are correctly converted to Unix epoch seconds in UTC.&#10;    The HTML files include Moment.js so that Chart.js 2.9.4 can handle time scales.&#10;    The current temperature graph auto-refreshes every 10 seconds.">
      <option name="closed" value="true" />
      <created>1742061955657</created>
      <option name="number" value="00061" />
      <option name="presentableId" value="LOCAL-00061" />
      <option name="project" value="LOCAL" />
      <updated>1742061955657</updated>
    </task>
    <task id="LOCAL-00062" summary="Explanation&#10;&#10;    The light toggle button now uses plain text. On the Pi it will display “Toggle Light” initially, and when clicked, it updates to “Light On” or “Light Off” depending on the state.&#10;    All other functionality remains the same.">
      <option name="closed" value="true" />
      <created>1742063907027</created>
      <option name="number" value="00062" />
      <option name="presentableId" value="LOCAL-00062" />
      <option name="project" value="LOCAL" />
      <updated>1742063907027</updated>
    </task>
    <task id="LOCAL-00063" summary="Below is a complete version of your original dashboard (from [489]) with the following modifications:&#10;&#10;    The View Temperature Graph button is moved so that it appears directly below the current temperature display and is now simply labeled “Graph.”&#10;    The up/down arrows for the timer have been changed to point up (▲) and down (▼) (instead of left/right), and both arrows are placed to the right of the timer value.&#10;    The original layout and functionality (including the 10-key keypad, timer functionality, and light toggle) are preserved.">
      <option name="closed" value="true" />
      <created>1742064210547</created>
      <option name="number" value="00063" />
      <option name="presentableId" value="LOCAL-00063" />
      <option name="project" value="LOCAL" />
      <updated>1742064210547</updated>
    </task>
    <task id="LOCAL-00064" summary="Below is a complete version of your original dashboard (from [489]) with the following modifications:&#10;&#10;    The View Temperature Graph button is moved so that it appears directly below the current temperature display and is now simply labeled “Graph.”&#10;    The up/down arrows for the timer have been changed to point up (▲) and down (▼) (instead of left/right), and both arrows are placed to the right of the timer value.&#10;    The original layout and functionality (including the 10-key keypad, timer functionality, and light toggle) are preserved.">
      <option name="closed" value="true" />
      <created>1742064330796</created>
      <option name="number" value="00064" />
      <option name="presentableId" value="LOCAL-00064" />
      <option name="project" value="LOCAL" />
      <updated>1742064330796</updated>
    </task>
    <task id="LOCAL-00065" summary="This version only changes the light toggle button's text—from an emoji to a plain text button labeled &quot;Light&quot; (which later updates to &quot;Light On&quot; or &quot;Light Off&quot; based on state) while preserving your original layout.">
      <option name="closed" value="true" />
      <created>1742078621573</created>
      <option name="number" value="00065" />
      <option name="presentableId" value="LOCAL-00065" />
      <option name="project" value="LOCAL" />
      <updated>1742078621573</updated>
    </task>
    <task id="LOCAL-00066" summary="Explanation&#10;&#10;    We added a new global variable LIGHT_PIN = 27.&#10;    In init_gpio(), we now also set up the light pin as an output and initialize it to LOW.&#10;    In the /toggle_light route, after toggling the configuration flag, we import RPi.GPIO (if available) and set LIGHT_PIN to HIGH if the light is on and LOW if off.&#10;    All other functionality remains unchanged.">
      <option name="closed" value="true" />
      <created>1742079321838</created>
      <option name="number" value="00066" />
      <option name="presentableId" value="LOCAL-00066" />
      <option name="project" value="LOCAL" />
      <updated>1742079321838</updated>
    </task>
    <task id="LOCAL-00067" summary="configured the temperature calibration stuff to work now.">
      <option name="closed" value="true" />
      <created>1742080881308</created>
      <option name="number" value="00067" />
      <option name="presentableId" value="LOCAL-00067" />
      <option name="project" value="LOCAL" />
      <updated>1742080881308</updated>
    </task>
    <task id="LOCAL-00068" summary="Summary&#10;&#10;    pid_autotune.py now contains a relay-feedback auto-tuning algorithm that overrides the heater output for a fixed test duration, measures oscillations, and computes PID gains using Ziegler–Nichols rules.&#10;    app.py has been updated to include a /pid_autotune route that supports both GET (to show the tuning interface) and POST (to run auto-tuning). When auto-tuning is run, the tuned PID parameters are stored in the global dictionary pid_params and also saved in the configuration.&#10;    pid_autotune.html is the template for the PID auto-tune page.">
      <option name="closed" value="true" />
      <created>1742082058261</created>
      <option name="number" value="00068" />
      <option name="presentableId" value="LOCAL-00068" />
      <option name="project" value="LOCAL" />
      <updated>1742082058261</updated>
    </task>
    <option name="localTasksCounter" value="69" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="if __name__ == '__main__':&#10;    init_gpio()  # Initialize GPIO now (after all imports)&#10;    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)&#10;&#10;disabled reloader." />
    <MESSAGE value="Adjusting pid control loop to make it shut off pin 17 faster when the temp exceeds the set point." />
    <MESSAGE value="init gpio error fixed." />
    <MESSAGE value="Updated dashboard to make everything fit without scrolling." />
    <MESSAGE value="I let chatgpt redesign the layout on dashboard.html Let's see what it came up with." />
    <MESSAGE value="slight update, the light button has been moved." />
    <MESSAGE value="More dashboard.html updates to get the layout correct." />
    <MESSAGE value="fixed functionality that chatgpt broke in previous update." />
    <MESSAGE value="Updated dashboard layout" />
    <MESSAGE value="Updated graphs to show time at bottom. app.py revised to support this feature." />
    <MESSAGE value="fixed typo in dashboard" />
    <MESSAGE value="Temp graph was messed up during the switch to showing time at the bottom. The link to historical cycles has been added to the dashboard now." />
    <MESSAGE value="With these older versions of Chart.js (2.9.4) and chartjs-plugin-zoom (0.7.7), your Pi’s Chromium browser should no longer complain about import conditions. The julianday() usage in app.py ensures timestamps are recognized. Let me know if this finally resolves the blank graph issue!" />
    <MESSAGE value="Using Chart.js 2.9.4 + Moment.js 2.24.0 + chartjs-plugin-zoom 0.7.7 should resolve the “import conditions not satisfied” error on older Pi browsers. Let me know if this finally displays the graphs correctly!" />
    <MESSAGE value="xplanation of Key Changes in app.py&#10;&#10;    Temperature Logger: Now prints a debug message every 5 seconds, so you can see if it’s inserting data or not.&#10;    /current_temp_history: Temporarily removed the 2‑hour filter. We simply show all readings in the current cycle. If no readings are found, we return dummy data.&#10;    /test_readings: New route that returns the last 10 rows from the readings table. This helps confirm whether new rows are actually being inserted.&#10;    Logger Sleep: Changed from 1 second to 5 seconds so it doesn’t spam the database too quickly while debugging." />
    <MESSAGE value="Key Changes:&#10;&#10;    We have an interval that calls fetchAndUpdate() every 10 seconds, so the chart automatically refreshes.&#10;    We initialize the chart once (with empty data) in initChart(), then in fetchAndUpdate() we fetch data from /current_temp_history and call updateChartData(data) to update the existing chart without re-creating it.&#10;    This ensures you see new points every 10 seconds." />
    <MESSAGE value=" The only changes relate to how the timestamp (ts) is computed in the SQL queries—now using SQLite’s 'localtime' modifier so that the epoch is computed from the stored timestamp as local time. This should cause Chart.js to display times that match your Pi’s local clock." />
    <MESSAGE value="Summary&#10;&#10;    We removed the ,'localtime' from your SQL queries.&#10;    You’re still storing local timestamps in the DB via datetime.now().&#10;    Chart.js is reading the numeric timestamps (epoch) and displaying them in the browser’s local time.&#10;&#10;If your Pi’s clock/time zone is correct (timedatectl), the lines on the graph should now reflect local time without being offset by ~10 hours. If you still see the wrong time, ensure you’ve replaced all instances of ,'localtime' and restarted Flask. Also confirm your Pi’s time zone matches the actual local time." />
    <MESSAGE value="Summary of Changes&#10;&#10;    In both /current_temp_history and /cycles/&lt;int:cycle_id&gt;/data routes, we now use the SQLite modifier 'utc' in the julianday function so that timestamps stored via datetime.now() (local time) are correctly converted to Unix epoch seconds in UTC.&#10;    The HTML files include Moment.js so that Chart.js 2.9.4 can handle time scales.&#10;    The current temperature graph auto-refreshes every 10 seconds." />
    <MESSAGE value="Explanation&#10;&#10;    The light toggle button now uses plain text. On the Pi it will display “Toggle Light” initially, and when clicked, it updates to “Light On” or “Light Off” depending on the state.&#10;    All other functionality remains the same." />
    <MESSAGE value="Below is a complete version of your original dashboard (from [489]) with the following modifications:&#10;&#10;    The View Temperature Graph button is moved so that it appears directly below the current temperature display and is now simply labeled “Graph.”&#10;    The up/down arrows for the timer have been changed to point up (▲) and down (▼) (instead of left/right), and both arrows are placed to the right of the timer value.&#10;    The original layout and functionality (including the 10-key keypad, timer functionality, and light toggle) are preserved." />
    <MESSAGE value="This version only changes the light toggle button's text—from an emoji to a plain text button labeled &quot;Light&quot; (which later updates to &quot;Light On&quot; or &quot;Light Off&quot; based on state) while preserving your original layout." />
    <MESSAGE value="Explanation&#10;&#10;    We added a new global variable LIGHT_PIN = 27.&#10;    In init_gpio(), we now also set up the light pin as an output and initialize it to LOW.&#10;    In the /toggle_light route, after toggling the configuration flag, we import RPi.GPIO (if available) and set LIGHT_PIN to HIGH if the light is on and LOW if off.&#10;    All other functionality remains unchanged." />
    <MESSAGE value="configured the temperature calibration stuff to work now." />
    <MESSAGE value="Summary&#10;&#10;    pid_autotune.py now contains a relay-feedback auto-tuning algorithm that overrides the heater output for a fixed test duration, measures oscillations, and computes PID gains using Ziegler–Nichols rules.&#10;    app.py has been updated to include a /pid_autotune route that supports both GET (to show the tuning interface) and POST (to run auto-tuning). When auto-tuning is run, the tuned PID parameters are stored in the global dictionary pid_params and also saved in the configuration.&#10;    pid_autotune.html is the template for the PID auto-tune page." />
    <option name="LAST_COMMIT_MESSAGE" value="Summary&#10;&#10;    pid_autotune.py now contains a relay-feedback auto-tuning algorithm that overrides the heater output for a fixed test duration, measures oscillations, and computes PID gains using Ziegler–Nichols rules.&#10;    app.py has been updated to include a /pid_autotune route that supports both GET (to show the tuning interface) and POST (to run auto-tuning). When auto-tuning is run, the tuned PID parameters are stored in the global dictionary pid_params and also saved in the configuration.&#10;    pid_autotune.html is the template for the PID auto-tune page." />
  </component>
</project>