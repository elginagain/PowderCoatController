<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="42e9cee9-cf8e-4a37-984c-80c486563aed" name="Changes" comment="Summary&#10;&#10;    On page load, the script now fetches the current target temperature from the server via /get_temperature and updates the set temperature display.&#10;    When you navigate away and return to the dashboard, the displayed set temperature reflects the value stored on the server.&#10;    The /status endpoint is used to update the oven status so that it remains accurate.">
      <change beforePath="$PROJECT_DIR$/app.py" beforeDir="false" afterPath="$PROJECT_DIR$/app.py" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;elginagain&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/elginagain/PowderCoatController&quot;,
    &quot;accountId&quot;: &quot;4c7c4038-d7e2-424e-8140-a73f505480cb&quot;
  }
}</component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 4
}</component>
  <component name="ProjectId" id="2tmIk9Sbn5165ZFCqdmXvWtoW42" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Python.app.executor&quot;: &quot;Run&quot;,
    &quot;Python.temperature_sensor.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/Elgin/PycharmProjects/PCoven/templates&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\Elgin\PycharmProjects\PCoven\templates" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="app" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
      <module name="PcOven" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
        <env name="FLASK_APP" value="app.py=" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="SDK_NAME" value="Python 3.11 (PCoven)" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="IS_MODULE_SDK" value="false" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/app.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-14705d77f0bb-aa17d162503b-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-243.25659.43" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="42e9cee9-cf8e-4a37-984c-80c486563aed" name="Changes" comment="" />
      <created>1740950963541</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1740950963541</updated>
    </task>
    <task id="LOCAL-00001" summary="Just testing temperature_sensor.py">
      <option name="closed" value="true" />
      <created>1741144161139</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1741144161139</updated>
    </task>
    <task id="LOCAL-00002" summary="Just testing temperature_sensor.py">
      <option name="closed" value="true" />
      <created>1741144904137</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1741144904137</updated>
    </task>
    <task id="LOCAL-00003" summary="Just testing temperature_sensor.py">
      <option name="closed" value="true" />
      <created>1741145087753</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1741145087753</updated>
    </task>
    <task id="LOCAL-00004" summary="Putting everything up to github to test on the pi.">
      <option name="closed" value="true" />
      <created>1741223483941</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1741223483941</updated>
    </task>
    <task id="LOCAL-00005" summary="Added temperature graphing and database to store 20 historical graphs.">
      <option name="closed" value="true" />
      <created>1741390557591</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1741390557591</updated>
    </task>
    <task id="LOCAL-00006" summary="updated current_temp_history.html">
      <option name="closed" value="true" />
      <created>1741391105694</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1741391105694</updated>
    </task>
    <task id="LOCAL-00007" summary="updated app.py,  current_temp_history.html, cycles.html, and cycle_graph.html to fix an issue with the temp graph not displaying.">
      <option name="closed" value="true" />
      <created>1741391659181</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1741391659181</updated>
    </task>
    <task id="LOCAL-00008" summary="Updated several files to add debugging features to determine why the graphing function isn't working.">
      <option name="closed" value="true" />
      <created>1741393029694</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1741393029694</updated>
    </task>
    <task id="LOCAL-00009" summary="Updated several files to add debugging features to determine why the graphing function isn't working.">
      <option name="closed" value="true" />
      <created>1741393051665</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1741393051665</updated>
    </task>
    <task id="LOCAL-00010" summary="Updated several files to add debugging features to determine why the graphing function isn't working.">
      <option name="closed" value="true" />
      <created>1741394983653</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1741394983653</updated>
    </task>
    <task id="LOCAL-00011" summary="How This Fixes the Error&#10;&#10;    Chart.js 3+ requires a date adapter for the time scale.&#10;    By adding Luxon and chartjs-adapter-luxon, Chart.js can parse and display time-based data.&#10;    The error “Check that a complete date adapter is provided” should go away once these scripts are included in the correct order.">
      <option name="closed" value="true" />
      <created>1741395592402</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1741395592402</updated>
    </task>
    <task id="LOCAL-00012" summary="Below is a corrected version of your dashboard.html (or the relevant JavaScript section) that uses $.ajax() with contentType: &quot;application/json&quot; so the server knows it’s receiving JSON. Copy/paste this code into your existing dashboard.html, replacing your temperature-setting and keypad-handling logic. This should fix the “Unsupported Media Type” error and allow your /set_temperature endpoint to receive the correct set temperature.">
      <option name="closed" value="true" />
      <created>1741396681884</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1741396681884</updated>
    </task>
    <task id="LOCAL-00013" summary="Below is a corrected version of your dashboard.html (or the relevant JavaScript section) that uses $.ajax() with contentType: &quot;application/json&quot; so the server knows it’s receiving JSON. Copy/paste this code into your existing dashboard.html, replacing your temperature-setting and keypad-handling logic. This should fix the “Unsupported Media Type” error and allow your /set_temperature endpoint to receive the correct set temperature.">
      <option name="closed" value="true" />
      <created>1741396805018</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1741396805018</updated>
    </task>
    <task id="LOCAL-00014" summary="Below is a corrected version of your dashboard.html (or the relevant JavaScript section) that uses $.ajax() with contentType: &quot;application/json&quot; so the server knows it’s receiving JSON. Copy/paste this code into your existing dashboard.html, replacing your temperature-setting and keypad-handling logic. This should fix the “Unsupported Media Type” error and allow your /set_temperature endpoint to receive the correct set temperature.">
      <option name="closed" value="true" />
      <created>1741396950935</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1741396950935</updated>
    </task>
    <task id="LOCAL-00015" summary="Below is a corrected version of your dashboard.html (or the relevant JavaScript section) that uses $.ajax() with contentType: &quot;application/json&quot; so the server knows it’s receiving JSON. Copy/paste this code into your existing dashboard.html, replacing your temperature-setting and keypad-handling logic. This should fix the “Unsupported Media Type” error and allow your /set_temperature endpoint to receive the correct set temperature.">
      <option name="closed" value="true" />
      <created>1741397042516</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1741397042516</updated>
    </task>
    <task id="LOCAL-00016" summary="Explanation&#10;&#10;    New /status Endpoint:&#10;    This returns the current oven state so that the dashboard can update its UI when you return to it.&#10;    Dashboard Update:&#10;    The updated JavaScript in dashboard.html calls /status on page load and every 5 seconds to set the text of the toggle button and the status label.&#10;    Result:&#10;    Even if you navigate away and then return to the dashboard, the page will reflect the current state (i.e. “Running” if the oven is still on).">
      <option name="closed" value="true" />
      <created>1741397573884</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1741397573884</updated>
    </task>
    <task id="LOCAL-00017" summary="Summary&#10;&#10;    On page load, the script now fetches the current target temperature from the server via /get_temperature and updates the set temperature display.&#10;    When you navigate away and return to the dashboard, the displayed set temperature reflects the value stored on the server.&#10;    The /status endpoint is used to update the oven status so that it remains accurate.">
      <option name="closed" value="true" />
      <created>1741398080379</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1741398080379</updated>
    </task>
    <option name="localTasksCounter" value="18" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Just testing temperature_sensor.py" />
    <MESSAGE value="Putting everything up to github to test on the pi." />
    <MESSAGE value="Added temperature graphing and database to store 20 historical graphs." />
    <MESSAGE value="updated current_temp_history.html" />
    <MESSAGE value="updated app.py,  current_temp_history.html, cycles.html, and cycle_graph.html to fix an issue with the temp graph not displaying." />
    <MESSAGE value="Updated several files to add debugging features to determine why the graphing function isn't working." />
    <MESSAGE value="How This Fixes the Error&#10;&#10;    Chart.js 3+ requires a date adapter for the time scale.&#10;    By adding Luxon and chartjs-adapter-luxon, Chart.js can parse and display time-based data.&#10;    The error “Check that a complete date adapter is provided” should go away once these scripts are included in the correct order." />
    <MESSAGE value="Below is a corrected version of your dashboard.html (or the relevant JavaScript section) that uses $.ajax() with contentType: &quot;application/json&quot; so the server knows it’s receiving JSON. Copy/paste this code into your existing dashboard.html, replacing your temperature-setting and keypad-handling logic. This should fix the “Unsupported Media Type” error and allow your /set_temperature endpoint to receive the correct set temperature." />
    <MESSAGE value="Explanation&#10;&#10;    New /status Endpoint:&#10;    This returns the current oven state so that the dashboard can update its UI when you return to it.&#10;    Dashboard Update:&#10;    The updated JavaScript in dashboard.html calls /status on page load and every 5 seconds to set the text of the toggle button and the status label.&#10;    Result:&#10;    Even if you navigate away and then return to the dashboard, the page will reflect the current state (i.e. “Running” if the oven is still on)." />
    <MESSAGE value="Summary&#10;&#10;    On page load, the script now fetches the current target temperature from the server via /get_temperature and updates the set temperature display.&#10;    When you navigate away and return to the dashboard, the displayed set temperature reflects the value stored on the server.&#10;    The /status endpoint is used to update the oven status so that it remains accurate." />
    <option name="LAST_COMMIT_MESSAGE" value="Summary&#10;&#10;    On page load, the script now fetches the current target temperature from the server via /get_temperature and updates the set temperature display.&#10;    When you navigate away and return to the dashboard, the displayed set temperature reflects the value stored on the server.&#10;    The /status endpoint is used to update the oven status so that it remains accurate." />
  </component>
</project>