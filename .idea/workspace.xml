<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="42e9cee9-cf8e-4a37-984c-80c486563aed" name="Changes" comment="Updated dashboard layout">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app.py" beforeDir="false" afterPath="$PROJECT_DIR$/app.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/templates/current_temp_history.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/current_temp_history.html" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/templates/cycle_graph.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/cycle_graph.html" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/templates/dashboard.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/dashboard.html" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;elginagain&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/elginagain/PowderCoatController&quot;,
    &quot;accountId&quot;: &quot;4c7c4038-d7e2-424e-8140-a73f505480cb&quot;
  }
}</component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 4
}</component>
  <component name="ProjectId" id="2tmIk9Sbn5165ZFCqdmXvWtoW42" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Python.app.executor&quot;: &quot;Run&quot;,
    &quot;Python.temperature_sensor.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/Elgin/PycharmProjects/PCoven/templates&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\Elgin\PycharmProjects\PCoven\templates" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="app" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
      <module name="PcOven" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
        <env name="FLASK_APP" value="app.py=" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="SDK_NAME" value="Python 3.11 (PCoven)" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="IS_MODULE_SDK" value="false" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/app.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-14705d77f0bb-aa17d162503b-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-243.25659.43" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="42e9cee9-cf8e-4a37-984c-80c486563aed" name="Changes" comment="" />
      <created>1740950963541</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1740950963541</updated>
    </task>
    <task id="LOCAL-00001" summary="Just testing temperature_sensor.py">
      <option name="closed" value="true" />
      <created>1741144161139</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1741144161139</updated>
    </task>
    <task id="LOCAL-00002" summary="Just testing temperature_sensor.py">
      <option name="closed" value="true" />
      <created>1741144904137</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1741144904137</updated>
    </task>
    <task id="LOCAL-00003" summary="Just testing temperature_sensor.py">
      <option name="closed" value="true" />
      <created>1741145087753</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1741145087753</updated>
    </task>
    <task id="LOCAL-00004" summary="Putting everything up to github to test on the pi.">
      <option name="closed" value="true" />
      <created>1741223483941</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1741223483941</updated>
    </task>
    <task id="LOCAL-00005" summary="Added temperature graphing and database to store 20 historical graphs.">
      <option name="closed" value="true" />
      <created>1741390557591</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1741390557591</updated>
    </task>
    <task id="LOCAL-00006" summary="updated current_temp_history.html">
      <option name="closed" value="true" />
      <created>1741391105694</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1741391105694</updated>
    </task>
    <task id="LOCAL-00007" summary="updated app.py,  current_temp_history.html, cycles.html, and cycle_graph.html to fix an issue with the temp graph not displaying.">
      <option name="closed" value="true" />
      <created>1741391659181</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1741391659181</updated>
    </task>
    <task id="LOCAL-00008" summary="Updated several files to add debugging features to determine why the graphing function isn't working.">
      <option name="closed" value="true" />
      <created>1741393029694</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1741393029694</updated>
    </task>
    <task id="LOCAL-00009" summary="Updated several files to add debugging features to determine why the graphing function isn't working.">
      <option name="closed" value="true" />
      <created>1741393051665</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1741393051665</updated>
    </task>
    <task id="LOCAL-00010" summary="Updated several files to add debugging features to determine why the graphing function isn't working.">
      <option name="closed" value="true" />
      <created>1741394983653</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1741394983653</updated>
    </task>
    <task id="LOCAL-00011" summary="How This Fixes the Error&#10;&#10;    Chart.js 3+ requires a date adapter for the time scale.&#10;    By adding Luxon and chartjs-adapter-luxon, Chart.js can parse and display time-based data.&#10;    The error “Check that a complete date adapter is provided” should go away once these scripts are included in the correct order.">
      <option name="closed" value="true" />
      <created>1741395592402</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1741395592402</updated>
    </task>
    <task id="LOCAL-00012" summary="Below is a corrected version of your dashboard.html (or the relevant JavaScript section) that uses $.ajax() with contentType: &quot;application/json&quot; so the server knows it’s receiving JSON. Copy/paste this code into your existing dashboard.html, replacing your temperature-setting and keypad-handling logic. This should fix the “Unsupported Media Type” error and allow your /set_temperature endpoint to receive the correct set temperature.">
      <option name="closed" value="true" />
      <created>1741396681884</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1741396681884</updated>
    </task>
    <task id="LOCAL-00013" summary="Below is a corrected version of your dashboard.html (or the relevant JavaScript section) that uses $.ajax() with contentType: &quot;application/json&quot; so the server knows it’s receiving JSON. Copy/paste this code into your existing dashboard.html, replacing your temperature-setting and keypad-handling logic. This should fix the “Unsupported Media Type” error and allow your /set_temperature endpoint to receive the correct set temperature.">
      <option name="closed" value="true" />
      <created>1741396805018</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1741396805018</updated>
    </task>
    <task id="LOCAL-00014" summary="Below is a corrected version of your dashboard.html (or the relevant JavaScript section) that uses $.ajax() with contentType: &quot;application/json&quot; so the server knows it’s receiving JSON. Copy/paste this code into your existing dashboard.html, replacing your temperature-setting and keypad-handling logic. This should fix the “Unsupported Media Type” error and allow your /set_temperature endpoint to receive the correct set temperature.">
      <option name="closed" value="true" />
      <created>1741396950935</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1741396950935</updated>
    </task>
    <task id="LOCAL-00015" summary="Below is a corrected version of your dashboard.html (or the relevant JavaScript section) that uses $.ajax() with contentType: &quot;application/json&quot; so the server knows it’s receiving JSON. Copy/paste this code into your existing dashboard.html, replacing your temperature-setting and keypad-handling logic. This should fix the “Unsupported Media Type” error and allow your /set_temperature endpoint to receive the correct set temperature.">
      <option name="closed" value="true" />
      <created>1741397042516</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1741397042516</updated>
    </task>
    <task id="LOCAL-00016" summary="Explanation&#10;&#10;    New /status Endpoint:&#10;    This returns the current oven state so that the dashboard can update its UI when you return to it.&#10;    Dashboard Update:&#10;    The updated JavaScript in dashboard.html calls /status on page load and every 5 seconds to set the text of the toggle button and the status label.&#10;    Result:&#10;    Even if you navigate away and then return to the dashboard, the page will reflect the current state (i.e. “Running” if the oven is still on).">
      <option name="closed" value="true" />
      <created>1741397573884</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1741397573884</updated>
    </task>
    <task id="LOCAL-00017" summary="Summary&#10;&#10;    On page load, the script now fetches the current target temperature from the server via /get_temperature and updates the set temperature display.&#10;    When you navigate away and return to the dashboard, the displayed set temperature reflects the value stored on the server.&#10;    The /status endpoint is used to update the oven status so that it remains accurate.">
      <option name="closed" value="true" />
      <created>1741398080379</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1741398080379</updated>
    </task>
    <task id="LOCAL-00018" summary="Below is an updated version of your app.py that now integrates hardware control via GPIO for your SSR and starts a PID control loop when the oven is turned on. When you click the “Start Oven” button, the code will now begin a PID loop that reads the current temperature, compares it to the setpoint, computes a duty cycle, and then drives the SSR (via PWM on a GPIO pin) to control the heating elements.&#10;&#10;Make sure you have your wiring set up so that the SSR’s input is connected to the GPIO pin defined below (here we use BCM pin 17). This code assumes it’s running on a Raspberry Pi (it checks sys.platform) and will only attempt to use RPi.GPIO if on Linux.&#10;&#10;You can copy/paste this full file into your project (replacing your existing app.py). Then, when you click “Start Oven,” it will start a new cycle and a PID control thread will begin updating the SSR output.&#10;&#10;Explanation&#10;&#10;    GPIO/PWM Setup:&#10;    We initialize RPi.GPIO and set up a PWM output on pin 17 (adjust if needed). This controls your SSR.&#10;&#10;    PID Control Loop:&#10;    When the oven is turned on via the /power endpoint, we start a new cycle and then start a PID control thread (if one isn’t already running). The PID loop reads the temperature, computes an error relative to the setpoint, and updates the PWM duty cycle to modulate the SSR output.&#10;&#10;    /power Endpoint:&#10;    The /power endpoint toggles the oven state and starts or ends a cycle accordingly, and now also starts the PID control thread.&#10;&#10;    PID Parameters:&#10;    You can adjust Kp, Ki, and Kd as needed for your oven’s dynamics.&#10;&#10;    Thread Safety:&#10;    The PID control loop runs in its own thread and stops when config[&quot;oven_on&quot;] becomes false.">
      <option name="closed" value="true" />
      <created>1741406435451</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1741406435451</updated>
    </task>
    <task id="LOCAL-00019" summary="Below is an updated version of your app.py that now integrates hardware control via GPIO for your SSR and starts a PID control loop when the oven is turned on. When you click the “Start Oven” button, the code will now begin a PID loop that reads the current temperature, compares it to the setpoint, computes a duty cycle, and then drives the SSR (via PWM on a GPIO pin) to control the heating elements.&#10;&#10;Make sure you have your wiring set up so that the SSR’s input is connected to the GPIO pin defined below (here we use BCM pin 17). This code assumes it’s running on a Raspberry Pi (it checks sys.platform) and will only attempt to use RPi.GPIO if on Linux.&#10;&#10;You can copy/paste this full file into your project (replacing your existing app.py). Then, when you click “Start Oven,” it will start a new cycle and a PID control thread will begin updating the SSR output.&#10;&#10;Explanation&#10;&#10;    GPIO/PWM Setup:&#10;    We initialize RPi.GPIO and set up a PWM output on pin 17 (adjust if needed). This controls your SSR.&#10;&#10;    PID Control Loop:&#10;    When the oven is turned on via the /power endpoint, we start a new cycle and then start a PID control thread (if one isn’t already running). The PID loop reads the temperature, computes an error relative to the setpoint, and updates the PWM duty cycle to modulate the SSR output.&#10;&#10;    /power Endpoint:&#10;    The /power endpoint toggles the oven state and starts or ends a cycle accordingly, and now also starts the PID control thread.&#10;&#10;    PID Parameters:&#10;    You can adjust Kp, Ki, and Kd as needed for your oven’s dynamics.&#10;&#10;    Thread Safety:&#10;    The PID control loop runs in its own thread and stops when config[&quot;oven_on&quot;] becomes false.">
      <option name="closed" value="true" />
      <created>1741407016827</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1741407016827</updated>
    </task>
    <task id="LOCAL-00020" summary="added a test script to test the PWM output and figure out why the LED on pin 17 isn't lighting up to indicate the SSR is being triggered when the oven is on and below set point.">
      <option name="closed" value="true" />
      <created>1741407492721</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1741407492721</updated>
    </task>
    <task id="LOCAL-00021" summary="Inverted duty cycle on app.py to see if that fixes the pid output on pin 17 so it lights the test led on the hat.">
      <option name="closed" value="true" />
      <created>1741408286865</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1741408286865</updated>
    </task>
    <task id="LOCAL-00022" summary="Key Points&#10;&#10;    The PID loop now prints debugging messages and calls pwm.ChangeDutyCycle(duty_cycle) without inversion, because your LED is active‑high.&#10;    The /power endpoint starts the PID loop if the oven is turned on.&#10;    The application should be run with sudo python3 app.py to ensure GPIO access.&#10;    The rest of the code (cycle management, temperature logging, timer, routes) remains as before.">
      <option name="closed" value="true" />
      <created>1741409035336</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1741409035336</updated>
    </task>
    <task id="LOCAL-00023" summary="added GPIO.cleanup()  # Clean up any previous allocations">
      <option name="closed" value="true" />
      <created>1741409558787</created>
      <option name="number" value="00023" />
      <option name="presentableId" value="LOCAL-00023" />
      <option name="project" value="LOCAL" />
      <updated>1741409558787</updated>
    </task>
    <task id="LOCAL-00024" summary="elow is an updated version of the GPIO setup section for your app.py. This version does a few things to help resolve the &quot;GPIO not allocated&quot; error:&#10;&#10;    Disables warnings: Some issues occur because of leftover warnings or previous allocations.&#10;    Registers a cleanup handler via atexit: This ensures that GPIO.cleanup() is always called on exit.&#10;    Attempts a cleanup before re‑initializing: This can help free any resources left over from previous runs.&#10;    Uses GPIO.setmode(GPIO.BCM) explicitly: To ensure the board is set to BCM mode.">
      <option name="closed" value="true" />
      <created>1741409986718</created>
      <option name="number" value="00024" />
      <option name="presentableId" value="LOCAL-00024" />
      <option name="project" value="LOCAL" />
      <updated>1741409986718</updated>
    </task>
    <task id="LOCAL-00025" summary="Added import os&#10;os.environ[&quot;GPIO_USE_DEV_MEM&quot;] = &quot;1&quot;  # Force RPi.GPIO to use /dev/mem&#10;&#10;Since you’re running Debian Bookworm instead of Raspberry Pi OS, the /dev/gpiomem device isn’t being created by your kernel. RPi.GPIO normally uses /dev/gpiomem on Raspberry Pi OS, but on other distributions, you’ll need to force it to use /dev/mem instead. (Be aware that using /dev/mem is less secure, so you should only run this code in a controlled environment.)&#10;&#10;One common workaround is to set the environment variable GPIO_USE_DEV_MEM to &quot;1&quot; before RPi.GPIO is imported. This tells RPi.GPIO to use /dev/mem.">
      <option name="closed" value="true" />
      <created>1741411522071</created>
      <option name="number" value="00025" />
      <option name="presentableId" value="LOCAL-00025" />
      <option name="project" value="LOCAL" />
      <updated>1741411522071</updated>
    </task>
    <task id="LOCAL-00026" summary="Below is an updated full version of your app.py with one key change: the immediate call to GPIO.cleanup() at startup has been removed. (We’re still registering cleanup via atexit.) In some cases, calling GPIO.cleanup() right away can interfere with RPi.GPIO’s ability to determine the SOC peripheral base address.">
      <option name="closed" value="true" />
      <created>1741458528469</created>
      <option name="number" value="00026" />
      <option name="presentableId" value="LOCAL-00026" />
      <option name="project" value="LOCAL" />
      <updated>1741458528469</updated>
    </task>
    <task id="LOCAL-00027" summary="Below is a complete updated version of your app.py that replaces RPi.GPIO with the pigpio library for GPIO/PWM control. This approach works more reliably on Debian‑based systems (like Raspberry Pi OS Lite 32‑bit on your hardware) and avoids the “GPIO not allocated” error. Note that you must have pigpiod (the pigpio daemon) running for this code to work. You can start it with:">
      <option name="closed" value="true" />
      <created>1741458856167</created>
      <option name="number" value="00027" />
      <option name="presentableId" value="LOCAL-00027" />
      <option name="project" value="LOCAL" />
      <updated>1741458856167</updated>
    </task>
    <task id="LOCAL-00028" summary="Key Points&#10;&#10;    This version uses pigpio in soft mode by calling:&#10;&#10;pi = pigpio.pi('soft')&#10;&#10;This bypasses hardware detection and avoids the &quot;GPIO not allocated&quot; error.&#10;The PID loop computes a duty cycle (0–100) and converts it to pigpio’s scale (0–255).&#10;A new test endpoint /test_pwm lets you force a 100% PWM output for 10 seconds to check the LED.&#10;Make sure to run pigpio in soft mode; you do not need to start pigpiod when using soft mode.">
      <option name="closed" value="true" />
      <created>1741459839066</created>
      <option name="number" value="00028" />
      <option name="presentableId" value="LOCAL-00028" />
      <option name="project" value="LOCAL" />
      <updated>1741459839066</updated>
    </task>
    <task id="LOCAL-00029" summary="Below is the complete updated app.py that uses pigpio in its normal mode (without “soft”) so that it connects to the pigpiod daemon running on localhost.">
      <option name="closed" value="true" />
      <created>1741460036662</created>
      <option name="number" value="00029" />
      <option name="presentableId" value="LOCAL-00029" />
      <option name="project" value="LOCAL" />
      <updated>1741460036662</updated>
    </task>
    <task id="LOCAL-00030" summary="Below is the complete updated app.py that uses pigpio in its normal mode (without “soft”) so that it connects to the pigpiod daemon running on localhost.">
      <option name="closed" value="true" />
      <created>1741460216043</created>
      <option name="number" value="00030" />
      <option name="presentableId" value="LOCAL-00030" />
      <option name="project" value="LOCAL" />
      <updated>1741460216043</updated>
    </task>
    <task id="LOCAL-00031" summary="Below is the complete updated app.py that uses pigpio in its normal mode (without “soft”) so that it connects to the pigpiod daemon running on localhost.">
      <option name="closed" value="true" />
      <created>1741460612092</created>
      <option name="number" value="00031" />
      <option name="presentableId" value="LOCAL-00031" />
      <option name="project" value="LOCAL" />
      <updated>1741460612092</updated>
    </task>
    <task id="LOCAL-00032" summary="created run_app.py">
      <option name="closed" value="true" />
      <created>1741462186646</created>
      <option name="number" value="00032" />
      <option name="presentableId" value="LOCAL-00032" />
      <option name="project" value="LOCAL" />
      <updated>1741462186646</updated>
    </task>
    <task id="LOCAL-00033" summary="created run_app.sh">
      <option name="closed" value="true" />
      <created>1741462254277</created>
      <option name="number" value="00033" />
      <option name="presentableId" value="LOCAL-00033" />
      <option name="project" value="LOCAL" />
      <updated>1741462254277</updated>
    </task>
    <task id="LOCAL-00034" summary="pi = pigpio.pi(&quot;soft&quot;, 8888)">
      <option name="closed" value="true" />
      <created>1741462509812</created>
      <option name="number" value="00034" />
      <option name="presentableId" value="LOCAL-00034" />
      <option name="project" value="LOCAL" />
      <updated>1741462509812</updated>
    </task>
    <task id="LOCAL-00035" summary="Below is a complete updated version of your app.py that reverts to using RPi.GPIO (which you’ve confirmed works in your test script) instead of pigpio. This version uses hardware PWM via RPi.GPIO on GPIO 17. (Make sure you run it with sudo, and that your virtual environment is active.)">
      <option name="closed" value="true" />
      <created>1741462842854</created>
      <option name="number" value="00035" />
      <option name="presentableId" value="LOCAL-00035" />
      <option name="project" value="LOCAL" />
      <updated>1741462842854</updated>
    </task>
    <task id="LOCAL-00036" summary="#os.environ[&quot;GPIO_USE_DEV_MEM&quot;] = &quot;1&quot;  # Force RPi.GPIO to use /dev/mem">
      <option name="closed" value="true" />
      <created>1741463176111</created>
      <option name="number" value="00036" />
      <option name="presentableId" value="LOCAL-00036" />
      <option name="project" value="LOCAL" />
      <updated>1741463176111</updated>
    </task>
    <task id="LOCAL-00037" summary="Below is an updated version of your app.py that moves the RPi.GPIO initialization into a function called init_gpio(), which is then called in the if __name__ == '__main__': block. This should help ensure that your GPIO resources are allocated fresh for your application.">
      <option name="closed" value="true" />
      <created>1741463756125</created>
      <option name="number" value="00037" />
      <option name="presentableId" value="LOCAL-00037" />
      <option name="project" value="LOCAL" />
      <updated>1741463756125</updated>
    </task>
    <task id="LOCAL-00038" summary="if __name__ == '__main__':&#10;    init_gpio()  # Initialize GPIO now (after all imports)&#10;    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)&#10;&#10;disabled reloader.">
      <option name="closed" value="true" />
      <created>1741463939641</created>
      <option name="number" value="00038" />
      <option name="presentableId" value="LOCAL-00038" />
      <option name="project" value="LOCAL" />
      <updated>1741463939641</updated>
    </task>
    <task id="LOCAL-00039" summary="Adjusting pid control loop to make it shut off pin 17 faster when the temp exceeds the set point.">
      <option name="closed" value="true" />
      <created>1741464696397</created>
      <option name="number" value="00039" />
      <option name="presentableId" value="LOCAL-00039" />
      <option name="project" value="LOCAL" />
      <updated>1741464696397</updated>
    </task>
    <task id="LOCAL-00040" summary="init gpio error fixed.">
      <option name="closed" value="true" />
      <created>1741464848432</created>
      <option name="number" value="00040" />
      <option name="presentableId" value="LOCAL-00040" />
      <option name="project" value="LOCAL" />
      <updated>1741464848432</updated>
    </task>
    <task id="LOCAL-00041" summary="Updated dashboard to make everything fit without scrolling.">
      <option name="closed" value="true" />
      <created>1741486336255</created>
      <option name="number" value="00041" />
      <option name="presentableId" value="LOCAL-00041" />
      <option name="project" value="LOCAL" />
      <updated>1741486336255</updated>
    </task>
    <task id="LOCAL-00042" summary="I let chatgpt redesign the layout on dashboard.html Let's see what it came up with.">
      <option name="closed" value="true" />
      <created>1741488222366</created>
      <option name="number" value="00042" />
      <option name="presentableId" value="LOCAL-00042" />
      <option name="project" value="LOCAL" />
      <updated>1741488222366</updated>
    </task>
    <task id="LOCAL-00043" summary="slight update, the light button has been moved.">
      <option name="closed" value="true" />
      <created>1741488505964</created>
      <option name="number" value="00043" />
      <option name="presentableId" value="LOCAL-00043" />
      <option name="project" value="LOCAL" />
      <updated>1741488505964</updated>
    </task>
    <task id="LOCAL-00044" summary="More dashboard.html updates to get the layout correct.">
      <option name="closed" value="true" />
      <created>1741488707009</created>
      <option name="number" value="00044" />
      <option name="presentableId" value="LOCAL-00044" />
      <option name="project" value="LOCAL" />
      <updated>1741488707009</updated>
    </task>
    <task id="LOCAL-00045" summary="More dashboard.html updates to get the layout correct.">
      <option name="closed" value="true" />
      <created>1741489000622</created>
      <option name="number" value="00045" />
      <option name="presentableId" value="LOCAL-00045" />
      <option name="project" value="LOCAL" />
      <updated>1741489000622</updated>
    </task>
    <task id="LOCAL-00046" summary="fixed functionality that chatgpt broke in previous update.">
      <option name="closed" value="true" />
      <created>1741489346460</created>
      <option name="number" value="00046" />
      <option name="presentableId" value="LOCAL-00046" />
      <option name="project" value="LOCAL" />
      <updated>1741489346460</updated>
    </task>
    <task id="LOCAL-00047" summary="Updated dashboard layout">
      <option name="closed" value="true" />
      <created>1741537778959</created>
      <option name="number" value="00047" />
      <option name="presentableId" value="LOCAL-00047" />
      <option name="project" value="LOCAL" />
      <updated>1741537778959</updated>
    </task>
    <task id="LOCAL-00048" summary="Updated dashboard layout">
      <option name="closed" value="true" />
      <created>1741538365870</created>
      <option name="number" value="00048" />
      <option name="presentableId" value="LOCAL-00048" />
      <option name="project" value="LOCAL" />
      <updated>1741538365870</updated>
    </task>
    <option name="localTasksCounter" value="49" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="added a test script to test the PWM output and figure out why the LED on pin 17 isn't lighting up to indicate the SSR is being triggered when the oven is on and below set point." />
    <MESSAGE value="Inverted duty cycle on app.py to see if that fixes the pid output on pin 17 so it lights the test led on the hat." />
    <MESSAGE value="Key Points&#10;&#10;    The PID loop now prints debugging messages and calls pwm.ChangeDutyCycle(duty_cycle) without inversion, because your LED is active‑high.&#10;    The /power endpoint starts the PID loop if the oven is turned on.&#10;    The application should be run with sudo python3 app.py to ensure GPIO access.&#10;    The rest of the code (cycle management, temperature logging, timer, routes) remains as before." />
    <MESSAGE value="added GPIO.cleanup()  # Clean up any previous allocations" />
    <MESSAGE value="elow is an updated version of the GPIO setup section for your app.py. This version does a few things to help resolve the &quot;GPIO not allocated&quot; error:&#10;&#10;    Disables warnings: Some issues occur because of leftover warnings or previous allocations.&#10;    Registers a cleanup handler via atexit: This ensures that GPIO.cleanup() is always called on exit.&#10;    Attempts a cleanup before re‑initializing: This can help free any resources left over from previous runs.&#10;    Uses GPIO.setmode(GPIO.BCM) explicitly: To ensure the board is set to BCM mode." />
    <MESSAGE value="Added import os&#10;os.environ[&quot;GPIO_USE_DEV_MEM&quot;] = &quot;1&quot;  # Force RPi.GPIO to use /dev/mem&#10;&#10;Since you’re running Debian Bookworm instead of Raspberry Pi OS, the /dev/gpiomem device isn’t being created by your kernel. RPi.GPIO normally uses /dev/gpiomem on Raspberry Pi OS, but on other distributions, you’ll need to force it to use /dev/mem instead. (Be aware that using /dev/mem is less secure, so you should only run this code in a controlled environment.)&#10;&#10;One common workaround is to set the environment variable GPIO_USE_DEV_MEM to &quot;1&quot; before RPi.GPIO is imported. This tells RPi.GPIO to use /dev/mem." />
    <MESSAGE value="Below is an updated full version of your app.py with one key change: the immediate call to GPIO.cleanup() at startup has been removed. (We’re still registering cleanup via atexit.) In some cases, calling GPIO.cleanup() right away can interfere with RPi.GPIO’s ability to determine the SOC peripheral base address." />
    <MESSAGE value="Below is a complete updated version of your app.py that replaces RPi.GPIO with the pigpio library for GPIO/PWM control. This approach works more reliably on Debian‑based systems (like Raspberry Pi OS Lite 32‑bit on your hardware) and avoids the “GPIO not allocated” error. Note that you must have pigpiod (the pigpio daemon) running for this code to work. You can start it with:" />
    <MESSAGE value="Key Points&#10;&#10;    This version uses pigpio in soft mode by calling:&#10;&#10;pi = pigpio.pi('soft')&#10;&#10;This bypasses hardware detection and avoids the &quot;GPIO not allocated&quot; error.&#10;The PID loop computes a duty cycle (0–100) and converts it to pigpio’s scale (0–255).&#10;A new test endpoint /test_pwm lets you force a 100% PWM output for 10 seconds to check the LED.&#10;Make sure to run pigpio in soft mode; you do not need to start pigpiod when using soft mode." />
    <MESSAGE value="Below is the complete updated app.py that uses pigpio in its normal mode (without “soft”) so that it connects to the pigpiod daemon running on localhost." />
    <MESSAGE value="created run_app.py" />
    <MESSAGE value="created run_app.sh" />
    <MESSAGE value="pi = pigpio.pi(&quot;soft&quot;, 8888)" />
    <MESSAGE value="Below is a complete updated version of your app.py that reverts to using RPi.GPIO (which you’ve confirmed works in your test script) instead of pigpio. This version uses hardware PWM via RPi.GPIO on GPIO 17. (Make sure you run it with sudo, and that your virtual environment is active.)" />
    <MESSAGE value="#os.environ[&quot;GPIO_USE_DEV_MEM&quot;] = &quot;1&quot;  # Force RPi.GPIO to use /dev/mem" />
    <MESSAGE value="Below is an updated version of your app.py that moves the RPi.GPIO initialization into a function called init_gpio(), which is then called in the if __name__ == '__main__': block. This should help ensure that your GPIO resources are allocated fresh for your application." />
    <MESSAGE value="if __name__ == '__main__':&#10;    init_gpio()  # Initialize GPIO now (after all imports)&#10;    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)&#10;&#10;disabled reloader." />
    <MESSAGE value="Adjusting pid control loop to make it shut off pin 17 faster when the temp exceeds the set point." />
    <MESSAGE value="init gpio error fixed." />
    <MESSAGE value="Updated dashboard to make everything fit without scrolling." />
    <MESSAGE value="I let chatgpt redesign the layout on dashboard.html Let's see what it came up with." />
    <MESSAGE value="slight update, the light button has been moved." />
    <MESSAGE value="More dashboard.html updates to get the layout correct." />
    <MESSAGE value="fixed functionality that chatgpt broke in previous update." />
    <MESSAGE value="Updated dashboard layout" />
    <option name="LAST_COMMIT_MESSAGE" value="Updated dashboard layout" />
  </component>
</project>